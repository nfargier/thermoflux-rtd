#! 


# Packages needed:
import pandas as pd
from cobra import Reaction, Metabolite

def excel_to_df(excel_path):
    """
    Reads a .xlsx file generated by exporting a .gdx model from GAMS.

    To generate such a file:
        GAMS Studio > Tools > Terminal >
        > cd into the appropriate directory >
        > "for /f %f in ('dir /b ') do gdx2xls %f"
    """
    xls = pd.ExcelFile(excel_path)

    # to read all sheets to a map
    sheet_to_df_map = {}
    for sheet_name in xls.sheet_names:
        if sheet_name == "Scalar":
            sheet_to_df_map["Scalar_param"] = xls.parse(sheet_name,
                                                        header=1,
                                                        index_col=0,
                                                        nrows=4)
            # sheet_to_df_map["Scalar_var"] = xls.parse(sheet_name, header=7, index_col=0, nrows=2)
            # sheet_to_df_map["Scalar_equation"] = xls.parse(sheet_name, header=11, index_col=0)

        else:
            sheet_to_df_map[sheet_name] = xls.parse(sheet_name,
                                                    header=2,
                                                    index_col=0)

    return sheet_to_df_map


def read_kegg_csv(keggids_csv):
    """
    Returns a dictionary where the keys are the metabolite names and the
    values their corresponding KEGG IDs.
    """
    df = pd.read_csv(keggids_csv)
    df = df.set_index("Name")
    kegg_ids = df.to_dict(orient="index")
    return kegg_ids


def add_kegg(met, basename, kegg_ids):
    """
    Store the KEGG IDs in the instances of Metabolite.
    """
    assert basename in met.name

    try:
        kegg = kegg_ids[basename]["Kegg"]

        if isinstance(kegg, str):
            met.annotation["kegg"] = kegg

        else:
            if basename == "charge":
                met.annotation["metanetx.chemical"] = "MNXM45842"

            elif basename == "electron":
                met.annotation["metanetx.chemical"] = "MNXM861"

            else:
                met.annotation["metanetx.chemical"] = "UNKNOWN"
                print(met.name, "compound unknown!  assigned as nothing")

        inchi = kegg_ids[basename]["Inchi"]

        if isinstance(inchi, str):
            met.annotation["InChI"] = inchi

    except KeyError:
        if basename == "biomass":
            met.annotation["metanetx.chemical"] = "BIOMASS"
            print(met.name, "assigned as biomass")
        else:
            print(met.name, "NOTHING DONE!")

    return met


# TO-DO: confirm that biomass_rxn is not to be added anew
def add_biomass_reactions(model):
    """
    Explicitly define three reactions for biomass:
    1) internal synthesis
    2) transport to [e]
    3) exchange reaction
    """
    print("*** Adding  extra biomass reactions ***")
    biomass_c = Metabolite(id="biomass_c", name="biomass", compartment="c")
    biomass_e = Metabolite(id="biomass_e", name="biomass", compartment="e")

    biomass_rxn = model.reactions.biomass
    biomass_rxn.id = "biomass_c"
    biomass_rxn.add_metabolites({
        biomass_c: 1.0})

    reaction = Reaction(id="biomass_ce", lower_bound=-1000, upper_bound=1000)
    reaction.add_metabolites({
        biomass_c: -1.0,
        biomass_e: 1.0,
        })

    biomassEX = Reaction(id="biomass_EX", lower_bound=-1000, upper_bound=1000)
    biomassEX.add_metabolites({
        biomass_e: -1.0})

    model.add_reactions([reaction, biomassEX])

    return model


def edit_special_metabolites(model, edit_mets):
    """
    Changes the charge or chemical formula of selected metabolites.
    """
    print("*** Editing special metabolites ***")
    protons = _retrieve_metabolite_idx_from_name(model, "h")
    for h in protons:
        model.metabolites[h].formula = "H1"

    charges = _retrieve_metabolite_idx_from_name(model, "charge")
    for c in charges:
        model.metabolites[c].charge = 1

    electrons = _retrieve_metabolite_idx_from_name(model, "electron")
    for e in electrons:
        model.metabolites[e].charge = -1

    if edit_mets is not None:
        met_ids = _retrieve_metabolite_idx_from_name(model, edit_mets.keys())
        for m in met_ids:
            met_name = model.metabolites[m].name.split("_")[0]
            changes = edit_mets[met_name]
            changes_list = [(k, val) for k, val in changes.items()]
            for cc in changes_list:
                setattr(model.metabolites[m], *cc)   # this should only allow for setting one attribute per metabolite

    return model


# TO-DO move to the utils module (?)
def _retrieve_metabolite_idx_from_name(model, name):
    """
    Returns a list of metabolites from the model that match the input
    name (irrespective of the compartment).
    Input may be a single metabolite name, or a list of multiple
    metabolite names.
    """
    if isinstance(name, str):
        name = [name]
    elif not isinstance(name, list):
        name = list(name)
    name = [x + "_" for x in name]
    return [i for i, m in enumerate(model.metabolites) if m.name[:-1] in name]